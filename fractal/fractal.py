#!/usr/bin/python3

import numpy as np
import matplotlib.pyplot as plt
import time
from imageprocess import HandleImage

class FractalGeometry:
    """
        This is implementation of fractal geometry
    """
    def __init__(self, logger):
        self.logger = logger
        self.data = None
        self.handleimage = HandleImage(logger)

    def mandelbrotset(self, rows=5, cols=5, iters=5, is_save=True, path="./", name="mandelbrotset.jpg"):
        """
            Implement mandelbrot set
            Zn + 1 = Zn*Zn + C
            Generated by repeating the following equation again and again
            Why default params is equal 5? Because i like this :wink: :wink:
        """
        start = time.time()
        x_cor = np.linspace(-2, 1, rows)
        y_cor = np.linspace(-2, 1, cols)
        output = np.zeros((rows, cols))

        for row in range(rows):
            for col in range(cols):
                c = np.complex(x_cor[row], y_cor[col])
                z = np.complex(0,0)
                count = 0
                for _ in range(iters):
                    z = z * z + c
                    count += 1
                    if(np.abs(z) > 4):
                        break
                output[row,col] = count

        end = time.time()
        self.logger.info(f"Mandelbro Set take {end - start} to compute image have size ({rows},{cols}) with iter={iter}")        
        self.data = output
        if is_save:
            self.handleimage.to_image(self.data,name="mandelbroset.jpg")

    def julia(self, rows=5, cols=5, iters=5, cx=0.0, cy=0.0, is_save=True, name="julia.jpg"):
        """
            Implement julia set
            Zn + 1 = Zn*Zn + C
            Generated by repeating the following equation again and again
            Why default params is equal 5? Because i like this :wink: :wink:
        """
        start = time.time()
        x_cor = np.linspace(-2, 2, rows)
        y_cor = np.linspace(-2, 2, cols)
        output = np.zeros((rows, cols))
        c = np.complex(cx, cy)

        for row in range(rows):
            for col in range(cols):
                z = np.complex(x_cor[row],y_cor[col])
                count = 0
                for _ in range(iters):
                    z = z * z + c
                    count += 1
                    if(np.abs(z) > 4):
                        break
                output[row,col] = count

        end = time.time()
        self.logger.info(f"Julia Set take {end - start} to compute image have size ({rows},{cols}) with iter={iters}")        
        self.data = output
        if is_save:
            self.handleimage.to_image(self.data,name="juliaset.jpg")
            